Rust
----

https://www.rust-lang.org

Toolchain
    View expanded macros
        using nightly rustc
            rustup run nightly rustc -Zunpretty=expanded src/main.rs
        using crate cargo-expand
            cargo install cargo-expand
            cargo expand

Types
    Scalar
        Integer
            i8 u8 i16 u16 i32 u32 i64 u64 i128 u128
            isize usize // archicecture dependent, used for indices
            Literals
                123i16 // type by suffix
                32_768 // decimal, _ digit grouping
                0xff // hex
                0o34 // octal
                0b1111_0000 // binary
                b'a' // byte (only u8)
        Floating point
            f32
            f64 // default
        Boolean
            bool false true
        Character
            char // 4 byte Unicode
    Compound
        Tuple
            ()
            let tup: (i32, f64, bool) = (1_234, 1.2e3, true)
            let tup01 = (tup.0, tup.1)
        Array
            let a: [i32; 5] = [10, 20, 30, 40, 50]
            let a = [3; 5] // [3, 3, 3, 3, 3]
    Slice
        seq[first..last] // 0-base indices, last = 1 after last position
        seq[first..]
        seq[..last]
        seq[..]
        seq.len() // size (length, number of elements)
    Struct
        struct Name {
            field1: type1,
            ...
            fiendN: typeN,
        }
        let s1 = Name { field1: val1, ..., fieldN: valN, };
        fn build_Name(field2: type2, field3: type3) {
            Name { field1: val1, field2, field3, ..., fieldN:valN, }
        }
        let s2 = Name { field1: val1_2, ..s1 }
        struct UnitLikeStruct; // implicitly defines constant UnitLikeStruct
        struct TupleStruct(i32, i32, i32) // each is a different type, even with same fields

Type alias
    type Alias = Type;

Variables and constants
    let immutable_variable = 1;
    let immutable_variable: i32 = 132;
    let mut mutable_variable = 2;
    let mut mutable_variable: i32 = 232;
    const constant: i32 = 0; // must be explicitly typed

Addresses and sizes of types and values
    std::mem::size_of<T>() // size of type T
    std::mem::size_of_val(&v) // size of value v
    let mut v: T = ...
    let p: *const T = &v as *const T;
    let p: *const T = std::ptr::addr_of!(v); // without creating intermediate reference
    let p: *mut T = &mut v as *mut T;
    let p: *mut T = std::ptr::addr_of_mut!(v); // without creating intermediate reference
    unsafe { &*p } // reborrowing as a reference
    unsafe { &mut *p } // reborrowing as a mutable reference
    format!("{:p}", p) // format a reference or pointer as address
    let a = p as usize // convert a pointer to integer containing the pointed to address
    a as *const T // convert an address to a pointer


Optional value
    enum Option<T> {
        None,
        Some(T),
    }

Value or error
    enum Result<T, E> {
        Ok(T),
        Err(E),
    }

Operators
    a..b ... a <= X < b
    a..=b ... a <= X <= b

Control expressions/statements
    if EXPR { ... }
    if EXPR { ... } else { ... }
    if EXPR { ... } else if EXPR { ... } else { ... }
    if let PATTERN = EXPR { ... } else { ... }
    loop { ... break; break EXPR; break 'LABEL; break 'LABEL EXPR; ... }
    loop { ... continue; continue 'LABEL; ... }
    'LABEL: loop { ... }
    while EXPR { ... }
    while let PATTERN = EXPR { ... }
    'LABEL: while EXPR { ... }
    for PATTERN in EXPR { ... }
    'LABEL: for PATTERN in ITER_EXPR { ... }
    match EXPR {
        PATTERN => EXPR,
        PATTERN => { ... }
        other => EXPR(other),
        other => { ... use(other) ... }
        _ => EXPR,
        _ => { ... }
    }
